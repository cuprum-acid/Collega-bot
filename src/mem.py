import logging
import os
import random
from datetime import date
from telegram import Update, error
from telegram.ext import CallbackContext

from config import STICKERS_NAME1, STICKERS_NAME2
from logger import logger


class ImageCategory:
    def __init__(self, name: str, description: str, chance: int):
        self.name: str = name
        self.description: str = description
        self.chance: int = chance
        self.memes: list[str] = os.listdir(f'res/images/{name}/')


class StickerCategory:
    def __init__(self, name: str, chance: int):
        self.name: str = name
        self.chance: int = chance
        self.memes = None


meme_categories = [
    StickerCategory(
        STICKERS_NAME1,
        17
    ),
    StickerCategory(
        STICKERS_NAME2,
        17
    ),
    ImageCategory(
        '–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
        '–≤–æ–∑–º–æ–∂–Ω–æ, —Å–µ–≥–æ–¥–Ω—è —Ç—ã —Å–º–æ–∂–µ—à—å –¥–æ–±–∏—Ç—å—Å—è —á–µ–≥–æ-—Ç–æ –Ω–µ–æ–±—ã—á–Ω–æ–≥–æ:\n\n–†–µ–¥–∫–æ—Å—Ç—å: –∫–æ–ª–¥–æ–≤—Å—Ç–≤–æ\nüåùüåùüåùüåëüåë',
        4
    ),
    ImageCategory(
        '–∂–∏–∑–∞',
        '–¥—É–º–∞—é, —Ç–µ–±–µ –∑–Ω–∞–∫–æ–º–æ —ç—Ç–æ —á—É–≤—Å—Ç–≤–æ:\n\n–†–µ–¥–∫–æ—Å—Ç—å: –Ω–∏—á–µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ\nüåùüåùüåëüåëüåë',
        8
    ),
    ImageCategory(
        '–Ω–∞–≤—è–∑—á–∏–≤—ã–µ_–º—ã—Å–ª–∏',
        ('–º–æ–∂–µ—Ç –±—ã—Ç—å, —Ç–µ–±—è –ø—Ä–µ—Å–ª–µ–¥—É—é—Ç –ø–æ–¥–æ–±–Ω—ã–µ –Ω–∞–≤—è–∑—á–∏–≤—ã–µ –º—ã—Å–ª–∏. '
         '–ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –¥—É–º–∞—Ç—å, —á—Ç–æ —ç—Ç–æ –≤—Å–µ –Ω–µ–ø—Ä–∞–≤–¥–∞.\n\n–†–µ–¥–∫–æ—Å—Ç—å: –∫–æ–ª–¥–æ–≤—Å—Ç–≤–æ\nüåùüåùüåùüåëüåë'),
        4
    ),
    ImageCategory(
        '–ø–ª–∞–Ω—ã',
        '–¥—É–º–∞—é, —Å–µ–≥–æ–¥–Ω—è —Ç–µ–±–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ —Å—Ç–æ–∏—Ç —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –ø–æ—Ö–æ–∂–µ–µ:\n\n–†–µ–¥–∫–æ—Å—Ç—å: –Ω–∏—á–µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ\nüåùüåùüåëüåëüåë',
        8
    ),
    ImageCategory(
        '–≤–æ–ø—Ä–æ—Å—ã',
        '—Å–µ–≥–æ–¥–Ω—è –≤–∞–∂–Ω–æ –∑–∞–¥–∞—Ç—å —Å–µ–±–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –∞ –ø–æ—Ç–æ–º –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ\n\n–†–µ–¥–∫–æ—Å—Ç—å: –Ω–∏—á–µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ\nüåùüåùüåëüåëüåë',
        8
    ),
    ImageCategory(
        '–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ',
        '–≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –ø–æ–¥–Ω–∏–º–µ—Ç —Ç–µ–±–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ\n\n–†–µ–¥–∫–æ—Å—Ç—å: –õ–µ–ì–µ–ù–¥–ê—Ä–ö–∞\nüåùüåùüåùüåùüåù',
        1
    ),
    ImageCategory(
        '–ø—Ä–∞–≤–∏–ª–∞',
        '–µ—Å—Ç—å –≤–∞–∂–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ. –°–µ–≥–æ–¥–Ω—è –ª—É—á—à–µ —Å–ª–µ–¥–æ–≤–∞—Ç—å –µ–º—É –≤–æ –≤—Å–µ–º\n\n–†–µ–¥–∫–æ—Å—Ç—å: –Ω–∏—á–µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ\nüåùüåùüåëüåëüåë',
        8
    ),
    ImageCategory(
        '—ç—Ç–æ_—è',
        '—É–∑–Ω–∞–µ—à—å —Å–µ–±—è?\n\n–†–µ–¥–∫–æ—Å—Ç—å: —Ü—ã–≥–∞–Ω—Å–∫–∏–µ —Ñ–æ–∫—É—Å—ã!\nüåùüåùüåùüåùüåë',
        2
    ),
    ImageCategory(
        '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
        '—É –º–µ–Ω—è –µ—Å—Ç—å –≤–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ–±—è.\n\n–†–µ–¥–∫–æ—Å—Ç—å: —Ü—ã–≥–∞–Ω—Å–∫–∏–µ —Ñ–æ–∫—É—Å—ã!\nüåùüåùüåùüåùüåë',
        2
    )
]
today_memes = dict()
last_update: date = date.today()


async def get_mem(update: Update, context: CallbackContext) -> None:
    global last_update
    if date.today() != last_update:
        today_memes.clear()
        last_update = date.today()
        logger.info(f"Updated memes on {last_update}")
    user_id = update.message.from_user.id
    if user_id not in today_memes:
        meme_category = random.choices(meme_categories, weights=[category.chance for category in meme_categories])[0]
        if isinstance(meme_category, StickerCategory) and meme_category.memes is None:
            try:
                meme_category.memes = (await context.bot.get_sticker_set(meme_category.name)).stickers
                logger.info(f'Loaded sticker set {meme_category.name}')
            except error.TimedOut:
                logger.warning(f'Timed out getting sticker set {meme_category.name}\n')
            except Exception as e:
                logger.warning(f'Invalid sticker set {meme_category.name}\n {e}')

        today_memes[user_id] = (meme_category, random.randint(0, len(meme_category.memes) - 1))

    meme_category = today_memes[user_id][0]
    meme_number = today_memes[user_id][1]
    logger.info(f'{meme_category.name = }, {meme_number = }')
    if isinstance(meme_category, StickerCategory):
        await context.bot.send_message(
            update.message.chat_id,
            f'{update.message.from_user.name}, —Ç–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è\n\n–†–µ–¥–∫–æ—Å—Ç—å: —Å—Ç–∏–∫–µ—Ä\nüåùüåëüåëüåëüåë'
        )
        await context.bot.send_sticker(
            update.message.chat_id,
            meme_category.memes[meme_number])
    elif isinstance(meme_category, ImageCategory):
        await context.bot.send_message(
            update.message.chat_id,
            f'{update.message.from_user.name}, {meme_category.description}'
        )
        await context.bot.send_photo(
            update.message.chat_id,
            f'res/images/{meme_category.name}/{meme_category.memes[meme_number]}'
        )
    else:
        logging.warning('unknown category')
